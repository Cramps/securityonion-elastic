#!/bin/bash

# Permanent listing of all cross cluster sensors, past and present
CROSSCLUSTERTAB=/etc/nsm/crossclustertab

# Log file to write output to
CROSSCLUSTERLOG=/var/log/elasticsearch/crossclustercheck.log

# Limit curl to 5 seconds
CROSSCLUSTER_CURL_OPTIONS="--max-time 5"

# The default settings above can be overridden in the config file
CONF=/etc/nsm/securityonion.conf

# If config doesn't exist, exit immediately
if ! [ -f ${CONF} ]; then
	exit 0
fi

# Import config
source ${CONF}

# If either Elasticsearch or Kibana are disabled, exit immediately
if [ ${ELASTICSEARCH_ENABLED} != "yes" -o ${KIBANA_ENABLED} != "yes" ]; then
	exit 0
fi

# If we can't connect to Elasticsearch, exit immediately
nc -z ${ELASTICSEARCH_HOST} ${ELASTICSEARCH_PORT}
if [ $? -ne 0 ]; then
	exit 0
fi

# Retrieve a list of cross cluster sensors from Elasticsearch.
# For each of the sensors in that list, add the sensor to a file if it's not already present in the file.
URL="http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_cluster/settings"
SENSORS=$(curl ${CROSSCLUSTER_CURL_OPTIONS} -XGET ${URL} 2>/dev/null | jq -r ".persistent.search.remote | keys[]")
for SENSOR in ${SENSORS}; do
	PORT=$(curl ${CROSSCLUSTER_CURL_OPTIONS} -XGET ${URL} 2>/dev/null | jq -r ".persistent.search.remote[\"${SENSOR}\"].seeds[0]")
	if ! grep -q "${SENSOR} ${PORT}" ${CROSSCLUSTERTAB} >/dev/null 2>&1; then
		echo "${SENSOR} ${PORT}" >> ${CROSSCLUSTERTAB}
	fi
done

# Iterate over the file (all sensors, past and present).
# For each sensor, check to see if we can connect to it.
# Update Elasticsearch with the status of each.
cat ${CROSSCLUSTERTAB} | while read HOSTNAME INT_PORT; do

	# Split INT_PORT into its constituent parts
	DOCKER_INTERFACE=$(echo ${INT_PORT} | cut -f1 -d:)
	REVERSE_PORT=$(echo ${INT_PORT} | cut -f2 -d:)

	# Check to see if we can connect to interface and port
	nc -z ${DOCKER_INTERFACE} ${REVERSE_PORT}
	if [ $? -ne 0 ]; then
		# If we can't connect, set seeds to null (disable)
		ARGS="{\"persistent\": {\"search\": {\"remote\": {\"${HOSTNAME}\": {\"seeds\": [null]}}}}}"
	else
		# If we can connect, set seeds to proper IP and port (enable)
		ARGS="{\"persistent\": {\"search\": {\"remote\": {\"${HOSTNAME}\": {\"seeds\": [\"${DOCKER_INTERFACE}:${REVERSE_PORT}\"]}}}}}"
	fi

	# Send settings to Elasticsearch and collect any output
	OUTPUT=$(curl ${CROSSCLUSTER_CURL_OPTIONS} -XPUT $URL -d "${ARGS}" -H "Content-Type: application/json" 2>/dev/null)

	# Create a log entry with ISO8601 date stamp
	DATE=$(date --iso-8601=seconds)
	echo "${DATE} ${HOSTNAME} ${DOCKER_INTERFACE} ${REVERSE_PORT} ${OUTPUT}" >> ${CROSSCLUSTERLOG}
done
