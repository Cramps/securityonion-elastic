#!/bin/bash

. /usr/sbin/so-elastic-common

. /etc/nsm/securityonion.conf

CUSTOM_CONF="/etc/logstash/custom"
INPUT_REDIS_CONF="/etc/logstash/conf.d/0900_input_redis.conf"
OUTPUT_REDIS_CONF="/etc/logstash/conf.d.redis.output/9900_output_redis.conf"
CONFD="/etc/logstash/conf.d"

if [ "$LOGSTASH_ENABLED" = "yes" ]; then
        echo -n "so-logstash: "
        if docker ps | grep -q so-logstash; then
                echo "Already started!"
        else
                if [ -d $CUSTOM_CONF ]; then
			rsync $CUSTOM_CONF/*.conf /etc/logstash/conf.d >/dev/null 2>&1
                        rsync $CUSTOM_CONF/*.json /etc/logstash/ >/dev/null 2>&1
		else
			mkdir $CUSTOM_CONF
		fi
		if [ "$FREQ_SERVER_ENABLED" = "yes" ]; then
			ln -sf ../conf.d.available/8502_postprocess_freq_analysis_bro_dns.conf /etc/logstash/conf.d/8502_postprocess_freq_analysis_bro_dns.conf
			ln -sf ../conf.d.available/8503_postprocess_freq_analysis_bro_http.conf /etc/logstash/conf.d/8503_postprocess_freq_analysis_bro_http.conf
			ln -sf ../conf.d.available/8504_postprocess_freq_analysis_bro_ssl.conf /etc/logstash/conf.d/8504_postprocess_freq_analysis_bro_ssl.conf
			ln -sf ../conf.d.available/8505_postprocess_freq_analysis_bro_x509.conf /etc/logstash/conf.d/8505_postprocess_freq_analysis_bro_x509.conf
                fi
                if [ "$FREQ_SERVER_ENABLED" = "no" ]; then
                        rm -f /etc/logstash/conf.d/*_postprocess_freq_analysis_*.conf
                fi
                if [ "$DOMAIN_STATS_ENABLED" = "yes" ]; then
			ln -sf ../conf.d.available/8007_postprocess_dns_top1m_tagging.conf /etc/logstash/conf.d/8007_postprocess_dns_top1m_tagging.conf
			ln -sf ../conf.d.available/8008_postprocess_dns_whois_age.conf /etc/logstash/conf.d/8008_postprocess_dns_whois_age.conf
                fi
                if [ "$DOMAIN_STATS_ENABLED" = "no" ]; then
                        rm -f /etc/logstash/conf.d/8007_postprocess_dns_top1m_tagging.conf
                        rm -f /etc/logstash/conf.d/8008_postprocess_dns_whois_age.conf
                fi

		# NIDS rule grep is expensive and should only be enabled if running Evaluation Mode (Bro in standalone mode)
		if ! grep "^type=standalone$" /opt/bro/etc/node.cfg >/dev/null 2>&1; then
			rm -f /etc/logstash/conf.d/1035_preprocess_snort_rule.conf
		fi

                if [ "$LOGSTASH_INPUT_REDIS" = "yes" ]; then
			# this is a storage node consuming from redis
			# need to add an input if it doesn't already exist
			if ! [ -f $INPUT_REDIS_CONF ]; then
cat << EOF >> $INPUT_REDIS_CONF
input {
	redis {
		host => '172.18.0.1'
		data_type => 'list'
		key => 'logstash:redis'
		type => 'redis-input'
		# threads => 1
	}
}
EOF
			fi
		else
			rm -f $INPUT_REDIS_CONF
		fi

                if [ "$LOGSTASH_OUTPUT_REDIS" = "yes" ]; then
			# this is a master server outputting to redis
			# logstash just needs 2 config files:
			# syslog input
			# redis output
			# create a new config directory for these 2 files
			CONFD="/etc/logstash/conf.d.redis.output/"
			mkdir -p $CONFD

			# create symbolic link for syslog input
			ln -sf ../conf.d.available/0000_input_syslogng.conf /etc/logstash/conf.d.redis.output/0000_input_syslogng.conf

			# create the redis output if it doesn't already exist
			if ! [ -f $OUTPUT_REDIS_CONF ]; then
cat << EOF >> $OUTPUT_REDIS_CONF
output {
	redis {
		host => '172.18.0.1'
		data_type => 'list'
		key => 'logstash:redis'
		congestion_interval => 1
		congestion_threshold => 50000000
		# batch_events => 500
	}
}
EOF
			fi

			# now configure redis
			REDISCONF="/etc/redis/redis.conf"
			# Allow logstash container to output to redis
			sed -i.bak 's|bind 127.0.0.1|bind 0.0.0.0|g' $REDISCONF
                	ufw allow proto tcp from 172.18.0.0/24 to 172.18.0.1 port 6379 >/dev/null
			# Configure redis memory settings
			TOTAL_MEM=`grep MemTotal /proc/meminfo | awk '{print $2}' | sed -r 's/.{3}$//'`
			REDISMEM=$(($TOTAL_MEM / 10))"m"
			if ! grep "^maxmemory" $REDISCONF >/dev/null 2>&1; then
				sed -i "/# maxmemory <bytes>/ a maxmemory $REDISMEM" $REDISCONF
				sed -i "/# maxmemory-policy volatile-lru/ a maxmemory-policy noeviction" $REDISCONF
			fi
			service redis-server start >/dev/null
		fi

		# Publish ports to $LOGSTASH_PUBLISH_IP but control them with iptables rules in DOCKER-USER
                docker run --name=so-logstash \
                        --detach \
			--publish $LOGSTASH_PUBLISH_IP:5044:5044 \
			--publish $LOGSTASH_PUBLISH_IP:6050:6050 \
                        --publish $LOGSTASH_PUBLISH_IP:6051:6051 \
                        --publish $LOGSTASH_PUBLISH_IP:6052:6052 \
                        --publish $LOGSTASH_PUBLISH_IP:6053:6053 \
                        --publish $LOGSTASH_PUBLISH_IP:9600:9600 \
                        --volume /etc/logstash/jvm.options:/usr/share/logstash/config/jvm.options:ro \
			--volume /etc/logstash/log4j2.properties:/usr/share/logstash/config/log4j2.properties:ro \
                        --volume /etc/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro \
                        --volume /etc/logstash/logstash-template.json:/logstash-template.json:ro \
			--volume /etc/logstash/beats-template.json:/beats-template.json:ro \
                        --volume $CONFD:/usr/share/logstash/pipeline/:ro \
                        --volume /etc/logstash/conf.d.available/:/usr/share/logstash/conf.d.available/:ro \
                        --volume /etc/nsm/rules:/etc/nsm/rules:ro \
                        --volume /lib/dictionaries:/lib/dictionaries:ro \
                        --volume /nsm/import:/nsm/import:ro \
                        --volume /nsm/logstash:/usr/share/logstash/data/ \
                        --volume /var/log/logstash:/var/log/logstash \
                        $LOGSTASH_OPTIONS \
                        $DOCKERHUB/so-logstash

		# logstash will connect to elasticsearch, domainstats, and freqserver over $DOCKERNET
		docker network connect --alias logstash $DOCKERNET so-logstash
        fi
fi
