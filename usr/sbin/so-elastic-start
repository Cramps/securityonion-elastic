#!/bin/bash

. /usr/sbin/so-elastic-common

. /etc/nsm/securityonion.conf

# Need to remove the existing containers before starting new ones.
# so-elastic-stop does run so-elastic-remove after stopping containers,
# but we need to run it again here just in case.
# The common scenario would be a user rebooting without first
# running so-elastic-stop.
/usr/sbin/so-elastic-remove

# Configure iptables and ufw
# we need to ensure proper rules are in place before starting containers
if ! iptables -L DOCKER-USER -v | grep -q DROP.*all.*\!docker0.*docker0; then 
	iptables -I DOCKER-USER ! -i docker0 -o docker0 -j DROP
fi
if ! grep -q "DOCKER-USER" /etc/ufw/after.rules; then	
	sed -i "/BROADCAST/{N;s/$/\n# Configure Docker rules\n# \/usr\/sbin\/so-allow will add new rules here for access to ports exposed by Docker containers\n-N DOCKER-USER\n-A DOCKER-USER ! -i docker0 -o docker0 -j DROP\n/}" /etc/ufw/after.rules
fi



echo
echo "Starting containers:"
echo

# Start so-freqserver
. /usr/sbin/so-elastic-start-freqserver

# Start so-domainstats
. /usr/sbin/so-elastic-start-domainstats

# Start so-elasticsearch
. /usr/sbin/so-elastic-start-elasticsearch

# Start so-logstash
. /usr/sbin/so-elastic-start-logstash

# Start so-kibana
. /usr/sbin/so-elastic-start-kibana

# Start so-elastalert
. /usr/sbin/so-elastic-start-elastalert

# Start so-curator
. /usr/sbin/so-elastic-start-curator

echo
